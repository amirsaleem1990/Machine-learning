rm(list = ls())
library(dplyr)
df <- read.csv("cleaned_data.csv")
if (names(df)[1] == "X"){
  #   print(head(df))
  #   readline("Name of first variable is <X>, this is prbabaily index variable, if so you should remove this variable, press 1 for remove, and 0 for keeping") ->> first_var_is_X
  #   if (first_var_is_X == "1"){
  df <- df %>% 
    select(-c("X"))
}
print(names(df))
# readline("Enter target variable name: ") ->> target_var_name
# target_var_name <- readLine("Enter target variable name: ")
target_var_name <- "SalePrice"
X <- df %>% 
  select(-c(target_var_name))
y <- df %>% 
  select(c(target_var_name))

X <- X[names(X) != "train_or_test"]

source("most_significant_var2.R")
most_significant_vaar = most_significant_var()[1]
most_significant_vaar_p_value = most_significant_var()[2]

final_vars <- c(most_significant_vaar)
balance_vars <- names(X)[!names(X) %in% final_vars]
final_P <- c(most_significant_vaar_p_value)

for (rang in seq(1:length(balance_vars)-1)){
  significance <- matrix(ncol = 2, nrow = 0)
  for (i in balance_vars){
  f <- as.formula(paste(target_var_name, 
                        paste(c(final_vars, i), collapse = " + "),sep = " ~ "))
  
  model <- lm(formula = f, data = df)
  model_coefficients <- data.frame(summary(model)$coefficients)
  
  significance <- rbind(significance, list(i, model_coefficients[i,4]))
  }
if (significance[which.min(significance[,2]), 2] > 0.05){
  break
 }else{
    final_vars <- append(final_vars, significance[which.min(significance[,2]), 1])
    final_P <- append(final_P, significance[which.min(significance[,2]), 2])
    balance_vars <- names(X)[!names(X) %in% final_vars]
 }}
cbind(final_vars, final_P)
most_significant_var <- function(){
  var.types <- sapply(X, class)
  all_varis_is_numeric = FALSE
  if (all(var.types %in% c("numeric", "integer")))
    all_varis_is_numeric = TRUE
  
  if (all_varis_is_numeric){
    # all vars are numeric, so we can simply taking a most correlated variable with target
    correlations <- data.frame(cor(cbind(X, y)))
    sorted_correlations <- correlations[order(correlations$target, decreasing = T),]
    most_correlated_var_with_target <- row.names(sorted_correlations[2,])
    print("All variables are numeric, and Most significant var [for Linear Regression] is: ")
    return (c(most_correlated_var_with_target, sorted_correlations[2,5]))
  }else{
    significance <- matrix(ncol = 2, nrow = 0)
    for (i in names(X)){
      tryCatch({
      predictors <- names(X)[!i == names(X)]
      f <- as.formula(paste(target_var_name,i,sep = " ~ "))
      model <- lm(formula = f, data = df)
      model_coefficients <- data.frame(summary(model)$coefficients)
      significance <- rbind(significance, list(i, model_coefficients[i,4]))
      }, error=function(e) stop(paste("ERROR: There is ERROR in variable", i, "[data: X]")))
    }
    print("Not all variables are numeric, and Most significant var [for Linear Regression] is: ")
    most_significant_var <- significance[which.min(significance[,2]), ]
    return (c(most_significant_var[1], most_significant_var[2]))
  }
}most_significant_var <- function(){
  var.types <- sapply(X, class)
  all_varis_is_numeric = FALSE
  if (all(var.types %in% c("numeric", "integer")))
        all_varis_is_numeric = TRUE

  if (all_varis_is_numeric){
    # all vars are numeric, so we can simply taking a most correlated variable with target
        correlations <- data.frame(cor(cbind(X, y)))
        sorted_correlations <- correlations[order(correlations$target, decreasing = T),]
        most_correlated_var_with_target <- row.names(sorted_correlations[2,])
        print("All variables are numeric, and Most significant var [for Linear Regression] is: ")
        return (c(most_correlated_var_with_target, sorted_correlations[2,5]))
  }else{
        significance <- matrix(ncol = 2, nrow = 0)
        for (i in names(X)){
            predictors <- names(X)[!i == names(X)]
            f <- as.formula(paste(target_var_name, 
                                  paste(predictors, collapse = " + "),sep = " ~ "))
            model <- lm(formula = f, data = df)
            model_coefficients <- data.frame(summary(model)$coefficients)
            a <- model_coefficients[which.min(model_coefficients[2:nrow(model_coefficients),4])+1,]
            significance <- rbind(significance, list(row.names(a), a[,4]))
            print("Not all variables are numeric, and Most significant var [for Linear Regression] is: ")
            most_correlated_var_with_target <- significance[which.min(significance[,2]), ]
            print("amir")
            return (c(most_correlated_var_with_target[1], most_correlated_var_with_target[2]))
      }
  }
}glm_model = glm(target_var ~ ., data = df, family = binomial)

train_prediction = predict(glm_model, type="response") 
test_prediction  = predict(glm_model, newdata=test, type="response") 
# let us check if model works or not
tapply(test_prediction, df$target_var, mean)
# 0       1
# 0.1	  0.44
# This means the models predict on average grater values for those are actually 1


cnf_mtrx <- function(target_var, predictions, cut_point){
  a = confusionMatrix(
    target_var,
    as.factor(ifelse(predictions < cut_point, 0, 1))
  )
  b <- a$table
  TN <- b[1]
  FN <- b[2]
  FP <- b[3]
  TP <- b[4]
  c(TN, TP, FP, FN)
}


summaryy <- function(actual, predicted){
  cut_points <- c()
  lst <- c()
  for (i in seq(0.04, 0.99, 0.01)){
    if (i >= min(predicted)){
      if (i <= max(predicted)){
        result <- cnf_mtrx(actual, predicted, i)
        lst <- append(lst, result)
        cut_points <- append(cut_points, i)
      }}}
  df <- data.frame(matrix(lst, ncol = 4, byrow = T))
  df$Cut_point <- cut_points
  names(df) <- c("TN", "TP", "FP", "FN", "Threshold")
  df$Precision <- df$TP / (df$TP + df$FP)
  df$Recall <- df$TP / (df$TP + df$FN)
  return (df)
plot_file <- "Precision Vs Recall_3"
}

df <- summaryy(churn, p)

jpeg(paste0(plot_file, ".jpg"), width = 2000, height = 1000)
ggplot(df, aes(x = Precision, y = Recall)) +
  geom_line() + 
  geom_point() + 
  scale_x_continuous(breaks = c(seq(from = 0, to = 1, by = 0.05))) + 
  scale_y_continuous(breaks = c(seq(from = 0, to = 1, by = 0.05)))
dev.off()

jpeg(paste0(plot_file, "_with_threshold.jpg"), width = 2000, height = 1000)
adf <- df[,5:7]
adf = reshape2::melt(adf, id.var = "Threshold")
ggplot(adf, aes(x=Threshold, y=value, col=variable)) +
  geom_line() + 
  scale_x_continuous(breaks = c(seq(from = 0, to = 1, by = 0.03))) +
  scale_y_continuous(breaks = c(seq(from = 0, to = 1, by = 0.05))) +
  labs(x = "Threshold", 
       y = "") + 
  theme_bw()
dev.off()